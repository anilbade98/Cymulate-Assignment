export declare type TimeUnit =
  | 'ms' /** milliseconds */
  | 's' /** seconds */
  | 'm' /** minutes */
  | 'h' /** hours */
  | 'd'; /** days */
export interface WaitOptions {
  /**
   * e.g seconds minutes etc
   * @default 'ms' (milliseconds)
   */
  timeUnit?: TimeUnit;
  /**
   * Whether to reject after the given time instead of resolving
   * @default false
   */
  reject?: boolean;
}
/**
 * Instead of passing a String literal to the timeUnit of the wait function options you can use this constant
 */
export declare const UNITS: Record<string, TimeUnit>;
/**
 * Accepts a given time from the point of being called and resolves after that time
 * @param {number} time The amount of time to wait before finishing
 * @param {WaitOptions} waitOptions
 * @returns A Promise that resolves after the given time
 */
export declare function wait(time: number, { timeUnit, reject }?: WaitOptions): Promise<void>;
